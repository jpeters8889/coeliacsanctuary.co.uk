<?php

declare(strict_types=1);

namespace Tests\Unit;

use Tests\TestCase;
use Tests\Traits\CreatesWhereToEat;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Coeliac\Modules\EatingOut\WhereToEat\Models\WhereToEat;
use Coeliac\Modules\EatingOut\WhereToEat\Models\WhereToEatRating;

class WhereToEatRatingsTest extends TestCase
{
    use RefreshDatabase;
    use CreatesWhereToEat;

    /** @var WhereToEat */
    protected $whereToEat;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->whereToEat = $this->createWhereToEat();
    }

    /** @test */
    public function it_has_ratings()
    {
        factory(WhereToEatRating::class)->create(['wheretoeat_id' => $this->whereToEat->id]);

        $this->assertEquals(1, $this->whereToEat->fresh()->ratings()->count());
    }

    /** @test */
    public function it_is_not_approved_by_default()
    {
        factory(WhereToEatRating::class)->create(['wheretoeat_id' => $this->whereToEat->id]);

        $this->assertFalse($this->whereToEat->fresh()->ratings()->first()->approved);
    }

    /** @test */
    public function it_has_an_average_rating()
    {
        factory(WhereToEatRating::class)->create(
            [
                'wheretoeat_id' => $this->whereToEat->id,
                'rating' => 5,
                'approved' => true,
            ]
        );
        factory(WhereToEatRating::class)->create(
            [
                'wheretoeat_id' => $this->whereToEat->id,
                'rating' => 4,
                'approved' => true,
            ]
        );

        $this->assertEquals(4.5, $this->whereToEat->fresh()->with('ratings')->first()->average_rating);
    }
}
