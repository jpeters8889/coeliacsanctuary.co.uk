<?php

declare(strict_types=1);

namespace Tests\Architect;

use Tests\Traits\HasImages;
use Tests\CreatesApplication;
use Tests\Traits\CreatesBlogs;
use Coeliac\Common\Models\Image;
use Illuminate\Support\Collection;
use Coeliac\Modules\Blog\Models\Blog;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Storage;
use Coeliac\Architect\Plans\ImageManager\Plan;
use Illuminate\Foundation\Testing\RefreshDatabase;
use JPeters\Architect\TestHelpers\Abstracts\PlanTestCase;

class ImageManagerPlanTest extends PlanTestCase
{
    use CreatesApplication;
    use RefreshDatabase;
    use CreatesBlogs;
    use HasImages;

    /** @var Plan */
    protected $plan;

    protected function setUp(): void
    {
        $this->createApplication();

        Config::set('filesystems.disks.images.root', __DIR__.'/../storage/app/tests');
        Config::set('filesystems.disks.images.url', __DIR__.'/../storage/app/tests');

//        $this->app->instance('path.storage', '/storage');

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function getPlan()
    {
        return Plan::class;
    }

    public function getColumnName()
    {
        return 'image';
    }

    /** @test */
    public function itGetsTheCurrentValue()
    {
        $blog = Blog::query()->create(['title' => 'foo', 'slug' => 'foo', 'body' => 'foo']);

        $class = $this->getPlan();

        /** @var Plan $plan */
        $plan = new $class('images');

        $images = ['article' => ['_test_image.png']];

        $plan->handleUpdate($blog, 'images', json_encode($images));

        $currentValue = $plan->getCurrentValue($blog);
        $image = $blog->fresh()->images()->first()->image;

        $this->assertInstanceOf(Collection::class, $currentValue);

        $keys = ['path', 'filename', 'type', 'width', 'height'];

        foreach ($keys as $key) {
            $this->assertArrayHasKey($key, $currentValue->first());
        }

        $this->assertEquals('cs-adm-uploads/'.$image->file_name, $currentValue->first()['path']);
        $this->assertEquals($image->file_name, $currentValue->first()['filename']);
        $this->assertEquals('article', $currentValue->first()['type']);
    }

    /** @test */
    public function itUpdatesTheModel()
    {
        Storage::fake();

        $blog = Blog::query()->create(['title' => 'foo', 'slug' => 'foo', 'body' => 'foo']);

        $class = $this->getPlan();

        /** @var Plan $plan */
        $plan = new $class('images');

        $images = ['article' => ['_test_image.png']];

        $plan->handleUpdate($blog, 'images', json_encode($images));

        $this->assertNotEmpty($blog->fresh()->images());

        $image = $blog->fresh()->images()->first()->image;

        $this->assertEquals('blogs/foo', $image->directory);
        $this->assertEquals(Image::IMAGE_CATEGORY_GENERAL, $blog->fresh()->images()->first()->image_category_id);

        Storage::disk('images')->assertExists($image->directory.'/'.$image->filename);
    }

    /** @test */
    public function itUploadsSocialImages()
    {
        Storage::fake();

        $blog = Blog::query()->create(['title' => 'foo', 'slug' => 'foo', 'body' => 'foo']);

        $class = $this->getPlan();

        /** @var Plan $plan */
        $plan = new $class('images');

        $images = [
            'social' => '_test_image.png',
        ];

        $plan->handleUpdate($blog, 'images', json_encode($images));

        $this->assertNotEmpty($blog->fresh()->images());
        $this->assertEquals(Image::IMAGE_CATEGORY_SOCIAL, $blog->fresh()->images()->first()->image_category_id);
    }

    /** @test */
    public function itUploadsHeaderImages()
    {
        Storage::fake();

        $blog = Blog::query()->create(['title' => 'foo', 'slug' => 'foo', 'body' => 'foo']);

        $class = $this->getPlan();

        /** @var Plan $plan */
        $plan = new $class('images');

        $images = [
            'header' => '_test_image.png',
        ];

        $plan->handleUpdate($blog, 'images', json_encode($images));

        $this->assertNotEmpty($blog->fresh()->images());
        $this->assertEquals(Image::IMAGE_CATEGORY_HEADER, $blog->fresh()->images()->first()->image_category_id);
    }

    /** @test */
    public function itUploadsSquareImages()
    {
        Storage::fake();

        $blog = Blog::query()->create(['title' => 'foo', 'slug' => 'foo', 'body' => 'foo']);

        $class = $this->getPlan();

        /** @var Plan $plan */
        $plan = new $class('images');

        $images = [
            'square' => '_test_image.png',
        ];

        $plan->handleUpdate($blog, 'images', json_encode($images));

        $this->assertNotEmpty($blog->fresh()->images());
        $this->assertEquals(Image::IMAGE_CATEGORY_SQUARE, $blog->fresh()->images()->first()->image_category_id);
    }

    /** @test */
    public function itContainsTheMetaInformation()
    {
        $this->assertArrayHasKey('buttons', $this->plan->getMetas());
        $this->assertArrayHasKey('insertImageIntoField', $this->plan->getMetas());
        $this->assertArrayHasKey('social', $this->plan->getMetas()['buttons']);
        $this->assertArrayHasKey('header', $this->plan->getMetas()['buttons']);
        $this->assertArrayHasKey('square', $this->plan->getMetas()['buttons']);
        $this->assertArrayHasKey('insert', $this->plan->getMetas()['buttons']);
    }

    /** @test */
    public function insertIntoFieldCanBeConfigured()
    {
        $this->assertNull($this->plan->getMetas()['insertImageIntoField']);

        $this->plan->enableImageInserts('foo');

        $this->assertEquals('foo', $this->plan->getMetas()['insertImageIntoField']);
    }

    /**
     * @test
     * @dataProvider buttonDataSet
     */
    public function itLetsSocialImageUploadsBeConfigured($button, $method)
    {
        $this->assertTrue($this->plan->getMetas()['buttons'][$button]);

        $this->plan->$method();

        $this->assertFalse($this->plan->getMetas()['buttons'][$button]);
    }

    public function buttonDataSet()
    {
        return [
          ['social', 'disableSocialImageOption'],
          ['square', 'disableSquareImageOption'],
          ['header', 'disableMainImageOption'],
        ];
    }
}
