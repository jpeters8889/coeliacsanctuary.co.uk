<?php

declare(strict_types=1);

namespace Tests\Architect;

use Tests\TestCase;
use Tests\Traits\CreatesBlogs;
use Coeliac\Common\Models\User;
use Coeliac\Common\Models\Comment;
use Illuminate\Support\Facades\Notification;
use Illuminate\Notifications\AnonymousNotifiable;
use Illuminate\Foundation\Testing\RefreshDatabase;
use JPeters\Architect\TestHelpers\Traits\LogsInUsers;
use Coeliac\Common\Comments\Notifications\CommentRepliedNotification;
use Coeliac\Common\Comments\Notifications\CommentApprovedNotification;

class CommentsApiCallTest extends TestCase
{
    use RefreshDatabase;
    use CreatesBlogs;
    use LogsInUsers;

    protected ?Comment $comment = null;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->logIn(factory(User::class)->create(['email' => 'jamie@jamie-peters.co.uk']));

        $blog = $this->createBlog();

        $this->comment = $blog->comments()->create(
            factory(Comment::class)->raw(['email' => 'jamie@foo.com'])
        );
    }

    /** @test */
    public function itDeletesComments()
    {
        $this->delete('/cs-adm/api/external/coeliac-comments/delete/'.$this->comment->id)->assertStatus(200);

        $this->assertDeleted($this->comment);
    }

    /** @test */
    public function itCanApproveComments()
    {
        Notification::fake();

        $this->assertEquals(0, $this->comment->approved);

        $this->put('/cs-adm/api/external/coeliac-comments/approve/'.$this->comment->id);

        Notification::assertSentTo(
            new AnonymousNotifiable(),
            CommentApprovedNotification::class,
            function (CommentApprovedNotification $notification, $channels, AnonymousNotifiable $notifiable) {
                $checks = [
                    $notifiable->routes['mail'] === 'jamie@foo.com',
                    $notification->comment()->is($this->comment),
                    in_array('mail', $channels),
                ];

                return !in_array(false, $checks);
            }
        );

        $this->assertEquals(1, $this->comment->fresh()->approved);
    }

    /** @test */
    public function itCanReplyToComments()
    {
        Notification::fake();

        $this->assertEquals(0, $this->comment->approved);

        $this->assertEmpty($this->comment->reply);

        $this->post('/cs-adm/api/external/coeliac-comments/reply/'.$this->comment->id, [
            'reply' => 'Test Reply',
        ]);

        Notification::assertSentTo(
            new AnonymousNotifiable(),
            CommentRepliedNotification::class,
            function (CommentRepliedNotification $notification, $channels, AnonymousNotifiable $notifiable) {
                $checks = [
                    $notifiable->routes['mail'] === 'jamie@foo.com',
                    $notification->comment()->is($this->comment),
                    in_array('mail', $channels),
                ];

                return !in_array(false, $checks);
            }
        );

        $this->assertEquals(1, $this->comment->fresh()->approved);

        $this->assertNotEmpty($this->comment->fresh()->reply);

        $this->assertEquals('Test Reply', $this->comment->fresh()->reply->comment_reply);
    }
}
