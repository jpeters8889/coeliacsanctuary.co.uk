<?php

declare(strict_types=1);

namespace Tests\Feature;

use Tests\TestCase;
use Coeliac\Common\Mail\ContactUs;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Event;
use Illuminate\Foundation\Testing\WithFaker;
use Coeliac\Common\Events\ContactFormSubmitted;
use Illuminate\Foundation\Testing\RefreshDatabase;

class ContactTest extends TestCase
{
    use RefreshDatabase;
    use WithFaker;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->setUpFaker();
    }

    /** @test */
    public function it_loads_the_page()
    {
        $this->get('/contact')
            ->assertStatus(200)
            ->assertSee('<contact-trigger :open="true" redirect="/"></contact-trigger>', false);
    }

    /** @test */
    public function it_errors_without_a_name()
    {
        $this->makeRequest(['name' => null])->assertStatus(422);
    }

    /** @test */
    public function it_errors_without_an_email()
    {
        $this->makeRequest(['email' => null])->assertStatus(422);
    }

    /** @test */
    public function it_errors_with_an_invalid_email()
    {
        $this->makeRequest(['email' => 'foo'])->assertStatus(422);
    }

    /** @test */
    public function it_errors_without_a_subject()
    {
        $this->makeRequest(['subject' => null])->assertStatus(422);
    }

    /** @test */
    public function it_errors_without_a_message()
    {
        $this->makeRequest(['message' => null])->assertStatus(422);
    }

    /** @test */
    public function it_returns_successful_when_valid_date_is_sent()
    {
        Event::fake();
        $this->makeRequest()->assertStatus(200);
    }

    /** @test */
    public function it_dispatches_an_event_when_the_form_is_submitted()
    {
        Event::fake();
        $this->makeRequest();

        Event::assertDispatched(ContactFormSubmitted::class);
    }

    /** @test */
    public function it_sends_an_email_when_the_form_is_submitted()
    {
        Mail::fake();

        $this->makeRequest();

        Mail::assertSent(ContactUs::class);
    }

    protected function makeRequest($params = [])
    {
        return $this->post('/api/contact', array_merge([
            'name' => $this->faker->name,
            'email' => $this->faker->email,
            'subject' => $this->faker->sentence,
            'message' => $this->faker->paragraph,
        ], $params));
    }
}
