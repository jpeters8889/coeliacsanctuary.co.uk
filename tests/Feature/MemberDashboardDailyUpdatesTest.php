<?php

namespace Tests\Feature;

use Coeliac\Modules\Blog\Models\BlogTag;
use Coeliac\Modules\EatingOut\WhereToEat\Models\WhereToEatCountry;
use Coeliac\Modules\EatingOut\WhereToEat\Models\WhereToEatCounty;
use Coeliac\Modules\EatingOut\WhereToEat\Models\WhereToEatTown;
use Coeliac\Modules\Member\Contracts\Updatable;
use Coeliac\Modules\Member\Models\DailyUpdateType;
use Coeliac\Modules\Member\Models\User;
use Coeliac\Modules\Member\Models\UserDailyUpdateSubscription;
use Tests\Abstracts\DashboardTest;

class MemberDashboardDailyUpdatesTest extends DashboardTest
{
    protected BlogTag $blogTag;

    protected function page(): string
    {
        return 'daily-updates';
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->blogTag = factory(BlogTag::class)->create();
    }

    protected function makeSubscribeRequest($type = DailyUpdateType::BLOG_TAGS, $updatable = null, $prop = 'slug')
    {
        if ($updatable === null) {
            $updatable = $this->blogTag;
        }

        return $this->post('/api/member/dashboard/daily-updates', [
            'type' => $type,
            'updatable' => $updatable instanceof Updatable ? $updatable->$prop : $updatable,
        ]);
    }

    /** @test */
    public function it_errors_when_subscribing_without_a_type()
    {
        $this->makeSubscribeRequest(null)->assertStatus(422);
    }

    /** @test */
    public function it_errors_when_subscribing_with_an_invalid_type()
    {
        $this->makeSubscribeRequest('foo')->assertStatus(422);
    }

    /** @test */
    public function it_errors_when_subscribing_to_a_type_that_doesnt_exist()
    {
        $this->makeSubscribeRequest(999)->assertStatus(422);
    }

    /** @test */
    public function it_errors_when_subscribing_without_an_updatable()
    {
        $this->makeSubscribeRequest(DailyUpdateType::BLOG_TAGS, false)->assertStatus(422);
    }

    /** @test */
    public function it_errors_when_trying_to_subscribe_to_a_updatable_that_doesnt_exist()
    {
        $this->makeSubscribeRequest(DailyUpdateType::BLOG_TAGS, 'foo')->assertStatus(422);
    }

    /** @test */
    public function it_returns_ok_on_the_subscribe_page_with_valid_data()
    {
        $this->makeSubscribeRequest()->assertOk();
    }

    /** @test */
    public function it_subscribes_the_user()
    {
        $this->assertEmpty(UserDailyUpdateSubscription::all());

        $this->makeSubscribeRequest()->assertOk();

        $this->assertNotEmpty(UserDailyUpdateSubscription::all());

        /** @var UserDailyUpdateSubscription $subscription */
        $subscription = UserDailyUpdateSubscription::query()->first();

        $this->assertEquals($this->user->id, $subscription->user_id);
        $this->assertEquals(DailyUpdateType::BLOG_TAGS, $subscription->daily_update_type_id);
        $this->assertInstanceOf(BlogTag::class, $subscription->updatable);
        $this->assertTrue($this->blogTag->is($subscription->updatable));
    }

    /** @test */
    public function it_can_unsubscribe()
    {
        $this->makeSubscribeRequest();

        $this->assertNotEmpty(UserDailyUpdateSubscription::all());

        /** @var UserDailyUpdateSubscription $subscription */
        $subscription = UserDailyUpdateSubscription::query()->first();

        $this->delete("/api/member/dashboard/daily-updates/{$subscription->id}")->assertOk();

        $this->assertEmpty(UserDailyUpdateSubscription::all());
    }

    /** @test */
    public function it_errors_if_the_subscription_doesnt_exist()
    {
        $this->delete('/api/member/dashboard/daily-updates/foo')->assertStatus(404);
    }

    /** @test */
    public function it_errors_when_trying_to_unsubscribe_from_another_users_subscriptions()
    {
        $user = factory(User::class)->create();

        DailyUpdateType::query()->first()->subscribe($user, $this->blogTag);

        $this->assertNotEmpty(UserDailyUpdateSubscription::all());

        /** @var UserDailyUpdateSubscription $subscription */
        $subscription = UserDailyUpdateSubscription::query()->first();

        $this->delete("/api/member/dashboard/daily-updates/{$subscription->id}")->assertStatus(403);

        $this->assertNotEmpty(UserDailyUpdateSubscription::all());
    }

    /** @test */
    public function it_errors_when_searching_for_an_existing_subscription_without_a_type()
    {
        $this->post('/api/member/dashboard/daily-updates/search', [
            'type' => null,
            'updatable' => 'foo',
        ])->assertStatus(422);
    }

    /** @test */
    public function it_errors_when_searching_for_an_existing_subscription_with_an_invalid_type()
    {
        $this->post('/api/member/dashboard/daily-updates/search', [
            'type' => 'foo',
            'updatable' => 'bar',
        ])->assertStatus(422);
    }

    /** @test */
    public function it_errors_when_searching_for_a_subscription_when_the_type_doesnt_exist()
    {
        $this->post('/api/member/dashboard/daily-updates/search', [
            'type' => 999,
            'updatable' => 'foo',
        ])->assertStatus(422);
    }

    /** @test */
    public function it_errors_when_searching_for_an_existing_subscription_without_an_updatable()
    {
        $this->post('/api/member/dashboard/daily-updates/search', [
            'type' => DailyUpdateType::BLOG_TAGS,
            'daily-updates' => null,
        ])->assertStatus(422);
    }

    /** @test */
    public function it_errors_when_searching_for_an_existing_subscription_with_an_updatable_that_doesnt_exist()
    {
        $this->post('/api/member/dashboard/daily-updates/search', [
            'type' => DailyUpdateType::BLOG_TAGS,
            'updatable' => 'foo',
        ])->assertStatus(422);
    }

    /** @test */
    public function it_can_find_out_whether_an_updatable_exists()
    {
        $this->makeSubscribeRequest();

        $subscription = UserDailyUpdateSubscription::query()->first();

        $this->post('/api/member/dashboard/daily-updates/search', [
            'type' => DailyUpdateType::BLOG_TAGS,
            'updatable' => $this->blogTag->slug,
        ])
            ->assertOk()
            ->assertJson(['id' => $subscription->id]);
    }

    /** @test */
    public function it_returns_no_content_when_not_subscribed_to_an_updatable()
    {
        $this->post('/api/member/dashboard/daily-updates/search', [
            'type' => DailyUpdateType::BLOG_TAGS,
            'updatable' => $this->blogTag->slug,
        ])->assertStatus(204);
    }

    /** @test */
    public function it_returns_the_users_subscriptions_on_the_subscription_list_endpoint()
    {
        $this->makeSubscribeRequest();

        $country = factory(WhereToEatCountry::class)->create();
        $county = factory(WhereToEatCounty::class)->create(['country_id' => $country->id]);
        $town = factory(WhereToEatTown::class)->create(['county_id' => $county->id]);

        $this->makeSubscribeRequest(DailyUpdateType::WTE_COUNTY, $county, 'id');
        $this->makeSubscribeRequest(DailyUpdateType::WTE_TOWN, $town, 'id');

        $request = $this->makeApiRequest();

        $this->assertIsArray($request->json());
        $request->assertJsonStructure([[
            'id',
            'type' => [
                'id',
                'name',
            ],
            'updatable' => [
                'id',
                'name',
                'link',
            ],
        ]]);
    }
}
