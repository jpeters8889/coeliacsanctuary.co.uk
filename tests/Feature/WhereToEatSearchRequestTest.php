<?php

declare(strict_types=1);

namespace Tests\Feature;

use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Coeliac\Modules\EatingOut\WhereToEat\Models\WhereToEatSearch;
use Coeliac\Modules\EatingOut\WhereToEat\Models\WhereToEatSearchTerm;

class WhereToEatSearchRequestTest extends TestCase
{
    use RefreshDatabase;
    use WithFaker;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->setUpFaker();
    }

    protected function makeRequest($params = [])
    {
        return $this->post('/api/wheretoeat/search', array_merge([
            'text' => $this->faker->word,
            'range' => $this->faker->randomElement(['1', '2', '5', '10', '20']),
        ], $params));
    }

    /** @test */
    public function it_errors_if_you_dont_include_a_search_term()
    {
        $this->makeRequest(['text' => null])->assertStatus(422);
    }

    /** @test */
    public function it_errors_if_you_dont_include_a_range()
    {
        $this->makeRequest(['range' => null])->assertStatus(422);
    }

    /** @test */
    public function it_errors_if_you_send_an_invalid_range()
    {
        $this->makeRequest(['range' => 'foo'])->assertStatus(422);
        $this->makeRequest(['range' => 1])->assertStatus(422);
        $this->makeRequest(['range' => '3'])->assertStatus(422);
    }

    /** @test */
    public function it_returns_a_success_when_a_valid_request_is_sent()
    {
        $this->makeRequest()->assertStatus(200);
    }

    /** @test */
    public function it_creates_a_search_term_upon_a_valid_request()
    {
        $this->assertEmpty(WhereToEatSearchTerm::query()->get());

        $this->makeRequest(['text' => 'Foo', 'range' => '1']);

        $this->assertNotEmpty(WhereToEatSearchTerm::query()->get());

        /** @var WhereToEatSearchTerm $term */
        $term = WhereToEatSearchTerm::query()->first();

        $this->assertEquals('Foo', $term->term);
        $this->assertEquals('1', $term->range);
    }

    /** @test */
    public function it_logs_a_search_upon_a_valid_request()
    {
        $this->assertEmpty(WhereToEatSearch::query()->get());

        $this->makeRequest();

        $this->assertNotEmpty(WhereToEatSearch::query()->get());
    }

    /** @test */
    public function it_returns_the_search_key_in_the_response()
    {
        $request = $this->makeRequest();

        /** @var WhereToEatSearchTerm $term */
        $term = WhereToEatSearchTerm::query()->first();

        $request->assertJson(['search' => $term->key]);
    }
}
