<?php

declare(strict_types=1);

namespace Tests\Feature\Modules\Members;

use Carbon\Carbon;
use Tests\TestCase;
use Spatie\TestTime\TestTime;
use Tests\Mocks\UserActivityMock;
use Coeliac\Modules\Member\Models\User;
use Coeliac\Modules\Member\Contracts\UserActivityMonitor;

class UpdateUserActivityCommandTest extends TestCase
{
    protected User $firstUser;
    protected User $secondUser;
    protected UserActivityMonitor $activityMonitor;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->app->instance(UserActivityMonitor::class, new UserActivityMock());

        $this->firstUser = $this->build(User::class)->asMember()->create();
        $this->secondUser = $this->build(User::class)->asMember()->create();

        TestTime::freeze();

        $this->activityMonitor = app(UserActivityMonitor::class);

        $this->activityMonitor->mark($this->firstUser);
        $this->activityMonitor->mark($this->secondUser);
    }

    protected function runCommand()
    {
        $this->artisan('coeliac:update-user-activity');
    }

    /** @test */
    public function itDoesntUpdateAnythingWhenTheresNothingToUpdate()
    {
        $this->activityMonitor->reset();

        $this->runCommand();

        $this->assertNull($this->firstUser->refresh()->last_visited_at);
        $this->assertNull($this->secondUser->refresh()->last_visited_at);
    }

    /** @test */
    public function itUpdatesTheUsersLastActivity()
    {
        $this->runCommand();

        $this->assertNotNull($this->firstUser->refresh()->last_visited_at);
        $this->assertNotNull($this->secondUser->refresh()->last_visited_at);

        $this->assertEquals(Carbon::now()->format('Y-m-d H:i:s'), $this->firstUser->last_visited_at->format('Y-m-d H:i:s'));
        $this->assertEquals(Carbon::now()->format('Y-m-d H:i:s'), $this->secondUser->last_visited_at->format('Y-m-d H:i:s'));
    }
}
