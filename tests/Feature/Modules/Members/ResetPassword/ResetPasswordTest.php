<?php

declare(strict_types=1);

namespace Tests\Feature\Modules\Members\ResetPassword;

use Tests\TestCase;
use Illuminate\Support\Arr;
use Illuminate\Container\Container;
use Illuminate\Support\Facades\Event;
use Coeliac\Modules\Member\Models\User;
use Illuminate\Contracts\Hashing\Hasher;
use Coeliac\Modules\Member\Models\UserLevel;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Notification;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Coeliac\Modules\Member\Events\UserPasswordReset;
use Coeliac\Modules\Member\Notifications\ResetPassword;

class ResetPasswordTest extends TestCase
{
    use RefreshDatabase;
    use WithFaker;

    protected User $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->setUpFaker();

        $this->user = factory(User::class)->create(['user_level_id' => UserLevel::MEMBER]);

        Notification::fake();
    }

    /** @test */
    public function itErrorsWhenVisitingThePasswordResetFormWithoutAToken()
    {
        $this->get('/member/reset-password')->assertNotFound();
    }

    /** @test */
    public function itReturnsOkIfATokenIsPassedWhenVisitingTheForm()
    {
        $this->get('/member/reset-password/foo')->assertOk();
    }

    /** @test */
    public function itRedirectsToTheDashboardIfALoggedInUserVisitsTheForm()
    {
        $this->actingAs($this->user);

        $this->get('/member/reset-password/foo')->assertRedirect('/member/dashboard');
    }

    protected function generateResetToken(): string
    {
        $token = null;

        $this->post('/api/member/forgot-password', [
            'email' => $this->user->email,
        ]);

        Notification::assertSentTo(
            $this->user,
            ResetPassword::class,
            function (ResetPassword $notification) use (&$token) {
                $token = Arr::last(explode('/', $notification->resetUrl()));

                return true;
            }
        );

        return $token;
    }

    protected function submitForm($params = [])
    {
        if (!array_key_exists('token', $params) || $params['token'] !== null) {
            $params['token'] = $this->generateResetToken();
        }

        return $this->post('/api/member/reset-password', array_merge([
            'token' => $params['token'],
            'email' => $this->user->email,
            'password' => 'password',
            'password_confirmation' => 'password',
        ], $params));
    }

    /** @test */
    public function itErrorsWhenSubmittingTheFormWithoutAToken()
    {
        $this->submitForm(['token' => null])->assertStatus(422);
    }

    /** @test */
    public function itErrorsWhenSubmittingTheFormWithoutAnEmailAddress()
    {
        $this->submitForm(['email' => null])->assertStatus(422);
    }

    /** @test */
    public function itErrorsWhenSubmittingTheFormWithAnInvalidEmailAddress()
    {
        $this->submitForm(['email' => 'foo'])->assertStatus(422);
    }

    /** @test */
    public function itErrorsWhenSubmittingTheFormWithoutAPassword()
    {
        $this->submitForm(['password' => null])->assertStatus(422);
    }

    /** @test */
    public function itErrorsWhenSubmittingTheFormWithAPasswordThatIsTooShort()
    {
        $this->submitForm(['password' => 'foo'])->assertStatus(422);
        $this->submitForm(['password' => 'foobars'])->assertStatus(422);
    }

    /** @test */
    public function itErrorsWhenSubmittingWithoutAPasswordConfirmation()
    {
        $this->submitForm(['password_confirmation' => null])->assertStatus(422);
    }

    /** @test */
    public function itErrorsWhenSubmittingWithADifferentPasswordConfirmation()
    {
        $this->submitForm([
            'password' => 'password1',
            'password_confirmation' => 'password2',
        ])->assertStatus(422);
    }

    /** @test */
    public function itReturnsOkWhenSubmittingTheFormWithValidData()
    {
        $this->submitForm()->assertOk();
    }

    /** @test */
    public function itUpdatesTheUsersPassword()
    {
        $hasher = Container::getInstance()->make(Hasher::class);

        $this->assertFalse($hasher->check('new_password', $this->user->password));

        $this->submitForm([
            'password' => 'new_password',
            'password_confirmation' => 'new_password',
        ]);

        $this->assertTrue($hasher->check('new_password', $this->user->fresh()->password));
    }

    /** @test */
    public function itDeletesThePasswordResetRow()
    {
        $token = $this->generateResetToken();

        $this->assertDatabaseCount('password_resets', 1);

        $this->submitForm(['token' => $token]);

        $this->assertDatabaseCount('password_resets', 0);
    }

    /** @test */
    public function itDispatchesAnEventWhenThePasswordIsReset()
    {
        Event::fake();

        $token = $this->generateResetToken();

        $this->submitForm(['token' => $token]);

        Event::assertDispatched(UserPasswordReset::class);
    }
}
