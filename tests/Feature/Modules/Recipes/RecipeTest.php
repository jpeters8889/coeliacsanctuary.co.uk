<?php

declare(strict_types=1);

namespace Tests\Feature\Modules\Recipes;

use Carbon\Carbon;
use Tests\TestCase;
use Tests\Traits\HasImages;
use Coeliac\Common\Models\Image;
use Tests\Traits\CreatesRecipes;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class RecipeTest extends TestCase
{
    use CreatesRecipes;
    use HasImages;
    use RefreshDatabase;
    use WithFaker;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /** @test */
    public function itLoadsTheRecipeIndexPage()
    {
        $this->get('/recipe')
            ->assertStatus(200)
            ->assertSee('<module-list-index module="recipes" title="Recipes" url-prefix="recipe"', false);
    }

    /** @test */
    public function itLoadsTheRecipeApiEndpoint()
    {
        for ($recipe = 0; $recipe < 13; ++$recipe) {
            $this->createRecipe([
                'title' => 'recipe-'.$recipe,
                'created_at' => Carbon::now()->subDays($recipe),
            ])
                ->associateImage($this->makeImage(['file_name' => 'image-'.$recipe]), Image::IMAGE_CATEGORY_HEADER);
        }

        $request = $this->get('/api/recipes');

        $request->assertJsonStructure([
            'data' => [
                'current_page',
                'data',
                'first_page_url',
                'from',
                'last_page',
                'last_page_url',
                'next_page_url',
                'path',
                'per_page',
                'prev_page_url',
                'to',
                'total',
            ],
        ]);

        for ($recipe = 0; $recipe < 12; ++$recipe) {
            $request->assertSee('recipe-'.$recipe, false);
            $request->assertSee('image-'.$recipe, false);
        }

        $request->assertDontSee('recipe-12');
        $request->assertDontSee('image-12');
    }

    /** @test */
    public function itOnlyShowsMatchingRecipesWhenFilteredByFeature()
    {
        $visibleRecipe = $this->createRecipe(['title' => 'visible-recipe-title']);
        $hiddenRecipe = $this->createRecipe(['title' => 'hidden-recipe-title']);

        $visibleRecipe->features()->attach($this->createRecipeFeature(['feature' => 'visible']));
        $hiddenRecipe->features()->attach($this->createRecipeFeature(['feature' => 'hidden']));

        $this->get('/api/recipes?filter[feature]=visible')
            ->assertSee('visible-recipe-title', false)
            ->assertDontSee('hidden-recipe-title');
    }

    /** @test */
    public function itOnlyShowsMatchingRecipesWhenFilteredByFreefrom()
    {
        $visibleRecipe = $this->createRecipe(['title' => 'visible-recipe-title']);
        $hiddenRecipe = $this->createRecipe(['title' => 'hidden-recipe-title']);

        $visibleRecipe->allergens()->attach($this->createRecipeAllergen(['allergen' => 'visible']));
        $hiddenRecipe->allergens()->attach($this->createRecipeAllergen(['allergen' => 'hidden']));

        $this->get('/api/recipes?filter[freefrom]=visible')
            ->assertSee('visible-recipe-title', false)
            ->assertDontSee('hidden-recipe-title');
    }

    /** @test */
    public function itOnlyShowsMatchingRecipesWhenFilteredByMeal()
    {
        $visibleRecipe = $this->createRecipe(['title' => 'visible-recipe-title']);
        $hiddenRecipe = $this->createRecipe(['title' => 'hidden-recipe-title']);

        $visibleRecipe->meals()->attach($this->createRecipeMeal(['meal' => 'visible']));
        $hiddenRecipe->meals()->attach($this->createRecipeMeal(['meal' => 'hidden']));

        $this->get('/api/recipes?filter[meal]=visible')
            ->assertSee('visible-recipe-title', false)
            ->assertDontSee('hidden-recipe-title');
    }

    /** @test */
    public function itShowsRecipeContent()
    {
        $recipe = $this->createRecipe();
        $this->createRecipeNutrition(['recipe_id' => $recipe->id]);

        $recipe->associateImage($this->makeImage(), Image::IMAGE_CATEGORY_HEADER)
            ->associateImage($this->makeImage(), Image::IMAGE_CATEGORY_SOCIAL);

        $this->get('/recipe/'.$recipe->slug)
            ->assertStatus(200)
            ->assertSee($recipe->title, false)
            ->assertSee($recipe->ingredients, false)
            ->assertSee($recipe->method, false)
            ->assertSee($recipe->main_image, false)
            ->assertSee($recipe->social_image, false);
    }

    /** @test */
    public function itDoesntLoadRecipesThatArentLive()
    {
        $this->withExceptionHandling();
        $recipe = $this->createRecipe(['live' => false]);

        $response = $this->get('/recipe/'.$recipe->slug);

        $response->assertNotFound();
    }
}
