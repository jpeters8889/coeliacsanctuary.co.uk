<?php

declare(strict_types=1);

namespace Tests\Feature\Modules\Shop\LeaveAReview;

use Carbon\Carbon;
use Coeliac\Modules\Shop\Jobs\SendReviewInvitation;
use Coeliac\Modules\Shop\Models\ShopOrder;
use Coeliac\Modules\Shop\Models\ShopOrderReviewInvitation;
use Coeliac\Modules\Shop\Models\ShopPostageCountry;
use Illuminate\Support\Facades\Bus;
use Spatie\TestTime\TestTime;
use Tests\TestCase;

class PrepareInvitationsJobTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Bus::fake();
    }

    /** @test */
    public function itDoesntQueueAnythingIfThereIsNothingToSend(): void
    {
        $this->artisan('coeliac:send-shop-review-invitations')
            ->expectsOutput('0 Invitations Sent');

        Bus::assertNothingDispatched();
    }

    /** @test */
    public function itDoesntQueueAnOrderThatWasDispatchedLessThanAWeekAgo(): void
    {
        $this->build(ShopOrder::class)
            ->asCompleted()
            ->create();

        $this->artisan('coeliac:send-shop-review-invitations')
            ->expectsOutput('0 Invitations Sent');

        Bus::assertNothingDispatched();
    }

    /** @test */
    public function itQueuesAnInvitation10DaysAfterItWasSent(): void
    {
        TestTime::freeze();

        $this->createOrder();

        TestTime::addDays(10)->subMinute();

        Bus::assertNothingDispatched();

        TestTime::addMinutes(2);

        $this->artisan('coeliac:send-shop-review-invitations')->expectsOutput('1 Invitations Sent');

        Bus::assertDispatched(SendReviewInvitation::class);
    }

    /** @test */
    public function itItDoesntQueueInvitationsIfTheTestFlagIsSet(): void
    {
        TestTime::freeze();

        $this->createOrder();
        $this->createOrder();
        $this->createOrder();

        TestTime::addWeek()->subMinute();

        Bus::assertNothingDispatched();

        TestTime::addMinutes(2);

        $this->artisan('coeliac:send-shop-review-invitations --testing');

        Bus::assertNothingDispatched();
    }

    /** @test */
    public function itCanSendAnInvitationById(): void
    {
        TestTime::freeze();

        $this->createOrder();

        Bus::assertNothingDispatched();

        $this->artisan('coeliac:send-shop-review-invitations --id=1');

        Bus::assertDispatched(SendReviewInvitation::class);
    }

    /** @test */
    public function itCanDisableSendingAnInvitationByIdWhenTesting(): void
    {
        TestTime::freeze();

        $this->createOrder();

        Bus::assertNothingDispatched();

        $this->artisan('coeliac:send-shop-review-invitations --id=1 --testing');

        Bus::assertNothingDispatched();
    }

    /** @test */
    public function itLogsThatTheInvitationIsReadyToBePrepared(): void
    {
        TestTime::freeze();

        $order = $this->createOrder();

        TestTime::addDays(10)->addMinute();

        $this->assertEmpty(ShopOrderReviewInvitation::all());

        $this->artisan('coeliac:send-shop-review-invitations');

        $this->assertNotEmpty(ShopOrderReviewInvitation::all());
        $this->assertCount(1, ShopOrderReviewInvitation::all());
        $this->assertNotNull($order->reviewInvitation);
    }

    /** @test */
    public function itDoesntSendTheReviewIfItsAlreadyLogged(): void
    {
        TestTime::freeze();

        $this->createOrder();

        TestTime::addDays(10)->addMinute();

        $this->artisan('coeliac:send-shop-review-invitations');

        Bus::assertDispatchedTimes(SendReviewInvitation::class, 1);
        $this->assertCount(1, ShopOrderReviewInvitation::all());

        TestTime::addMinutes(5);

        Bus::assertDispatchedTimes(SendReviewInvitation::class, 1);
        $this->artisan('coeliac:send-shop-review-invitations')->expectsOutput('0 Invitations Sent');

        $this->assertCount(1, ShopOrderReviewInvitation::all());
    }

    /** @test */
    public function itDoesntSendOldInvitations(): void
    {
        TestTime::freeze();

        $this->createOrder(['shipped_at' => Carbon::now()->subYear()]);
        $this->createOrder(['shipped_at' => Carbon::now()->subMonths(6)]);
        $this->createOrder(['shipped_at' => Carbon::now()->subMonth()]);

        $this->artisan('coeliac:send-shop-review-invitations')
            ->expectsOutput('0 Invitations Sent');

        Bus::assertNothingDispatched();
    }

    /** @test */
    public function itDoesntSendNoneUkOrdersAfterSevenDays(): void
    {
        TestTime::freeze();

        $this->createOrder(['postage_country_id' => ShopPostageCountry::ROI]);
        $this->createOrder(['postage_country_id' => ShopPostageCountry::USA]);
        $this->createOrder(['postage_country_id' => ShopPostageCountry::AUS]);

        TestTime::addWeek()->addMinute();

        $this->artisan('coeliac:send-shop-review-invitations')
            ->expectsOutput('0 Invitations Sent');

        Bus::assertNothingDispatched();
    }

    /** @test */
    public function itSendsEuropeanOrdersAfterTwoWeeks(): void
    {
        TestTime::freeze();

        $euOrder = $this->createOrder(['postage_country_id' => ShopPostageCountry::ROI]);
        $this->createOrder(['postage_country_id' => ShopPostageCountry::USA]);
        $this->createOrder(['postage_country_id' => ShopPostageCountry::AUS]);

        TestTime::addWeeks(2)->addMinute();

        $this->artisan('coeliac:send-shop-review-invitations')
            ->expectsOutput('1 Invitations Sent');

        Bus::assertDispatchedTimes(SendReviewInvitation::class, 1);

        $this->assertNotEmpty($euOrder->reviewInvitation);
        $this->assertCount(1, ShopOrderReviewInvitation::all());
    }

    /** @test */
    public function itSendsUSandAusOrdersAfterThreeWeeks(): void
    {
        TestTime::freeze();

        $this->createOrder(['postage_country_id' => ShopPostageCountry::USA]);
        $this->createOrder(['postage_country_id' => ShopPostageCountry::AUS]);

        TestTime::addWeeks(3)->addMinute();

        $this->artisan('coeliac:send-shop-review-invitations')
            ->expectsOutput('2 Invitations Sent');

        Bus::assertDispatchedTimes(SendReviewInvitation::class, 2);

        $this->assertCount(2, ShopOrderReviewInvitation::all());
    }

    protected function createOrder($params = []): ShopOrder
    {
        return $this->build(ShopOrder::class)->asCompleted()->create($params);
    }
}
