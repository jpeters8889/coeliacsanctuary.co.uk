<?php

declare(strict_types=1);

namespace Tests\Feature\Modules\EatingOut\WhereToEat;

use Coeliac\Modules\EatingOut\WhereToEat\Events\PlaceRecommendationSubmitted;
use Coeliac\Modules\EatingOut\WhereToEat\Mail\PlaceRecommendedMailable;
use Coeliac\Modules\EatingOut\WhereToEat\Models\WhereToEatRecommendation;
use Coeliac\Modules\EatingOut\WhereToEat\Models\WhereToEatVenueType;
use Tests\TestCase;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Event;
use Illuminate\Foundation\Testing\WithFaker;

class WhereToEatRecommendPlaceTest extends TestCase
{
    use WithFaker;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->setUpFaker();
    }

    /** @test */
    public function itLoadsThePage()
    {
        $this->get('/wheretoeat/recommend-a-place')
            ->assertStatus(200)
            ->assertSee('<wheretoeat-pages-place-request', false);
    }

    /** @test */
    public function itPassesTheVenueTypesToTheView()
    {
        $this->get('/wheretoeat/recommend-a-place')
            ->assertViewHas('venueTypes');
    }

    /** @test */
    public function itErrorsWithoutAName()
    {
        $this->makeCreateRequest(['name' => null])
            ->assertStatus(422);
    }

    /** @test */
    public function itErrorsWithoutAnEmail()
    {
        $this->makeCreateRequest(['email' => null])
            ->assertStatus(422);
    }

    /** @test */
    public function itErrorsWithoutAnInvalidEmail()
    {
        $this->makeCreateRequest(['email' => 'foo'])
            ->assertStatus(422);
    }

    /** @test */
    public function itErrorsWithoutThePlaceName()
    {
        $this->makeCreateRequest(['place_name' => null])
            ->assertStatus(422);
    }

    /** @test */
    public function itErrorsWithoutThePlaceLocation()
    {
        $this->makeCreateRequest(['place_location' => null])
            ->assertStatus(422);
    }

    /** @test */
    public function itErrorsWithoutAnInvalidVenueTypeId()
    {
        $this->makeCreateRequest(['place_venue_type_id' => 'foo'])
            ->assertStatus(422);

        $this->makeCreateRequest(['place_venue_type_id' => 1234])
            ->assertStatus(422);
    }

    /** @test */
    public function itErrorsWithoutThePlaceDetails()
    {
        $this->makeCreateRequest(['place_details' => null])
            ->assertStatus(422);
    }

    /** @test */
    public function itReturnsASuccesfulResponseWhenAllValidDataIsSent()
    {
        Event::fake();

        $this->makeCreateRequest()->assertStatus(200);
    }

    /** @test */
    public function itStoresTheDataInTheDatabase()
    {
        Event::fake();

        $this->assertCount(0, WhereToEatRecommendation::all());

        $params = [
            'name' => $this->faker->name,
            'email' => $this->faker->email,
            'place_name' => $this->faker->company,
            'place_location' => $this->faker->address,
            'place_web_address' => $this->faker->domainName,
            'place_venue_type_id' => 1,
            'place_details' => $this->faker->paragraph,
        ];

        $this->makeCreateRequest($params);

        $this->assertCount(1, WhereToEatRecommendation::all());
    }

    /** @test */
    public function itEmitsAnEventWhenARequestIsReceived()
    {
        Event::fake();

        $this->makeCreateRequest();

        Event::assertDispatched(PlaceRecommendationSubmitted::class);
    }

    /** @test */
    public function itTriggersAnEmailWhenARequestIsRecieved()
    {
        Mail::fake();

        $this->makeCreateRequest();

        Mail::assertSent(PlaceRecommendedMailable::class);
    }

    private function makeCreateRequest($params = [])
    {
        return $this->post('/api/wheretoeat/recommend-a-place', array_merge([
            'name' => $this->faker->name,
            'email' => $this->faker->email,
            'place_name' => $this->faker->company,
            'place_location' => $this->faker->address,
            'place_web_address' => $this->faker->domainName,
            'place_venue_type_id' => 1,
            'place_details' => $this->faker->paragraph,
        ], $params));
    }
}
