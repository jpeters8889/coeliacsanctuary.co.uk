<?php

declare(strict_types=1);

namespace Tests\Feature\Modules\EatingOut\WhereToEat;

use Tests\TestCase;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Event;
use Illuminate\Foundation\Testing\WithFaker;
use Coeliac\Modules\EatingOut\WhereToEat\Models\PlaceRequest;
use Coeliac\Modules\EatingOut\WhereToEat\Events\PlaceRequestSubmitted;
use Coeliac\Modules\EatingOut\WhereToEat\Mail\PlaceRequestMailable;

class WhereToEatPlaceRequestTest extends TestCase
{
    use WithFaker;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->setUpFaker();
    }

    /** @test */
    public function itErrorsWithoutAName()
    {
        $this->makeCreateRequest(['name' => null])
            ->assertStatus(422);
    }

    /** @test */
    public function itErrorsWithoutAState()
    {
        $this->makeCreateRequest(['state' => null])
            ->assertStatus(422);
    }

    /** @test */
    public function itErrorsWithAnInvalidState()
    {
        $this->makeCreateRequest(['state' => 'foo'])
            ->assertStatus(422);
    }

    /** @test */
    public function itErrorsWithoutAnyComments()
    {
        $this->makeCreateRequest(['comment' => null])
            ->assertStatus(422);
    }

    /** @test */
    public function itReturnsASuccesfulResponseWhenAllValidDataIsSent()
    {
        Event::fake();

        $this->makeCreateRequest()->assertStatus(200);
    }

    /** @test */
    public function itStoresTheDataInTheDatabase()
    {
        Event::fake();

        $params = [
            'name' => $this->faker->name,
            'state' => $this->faker->randomElement(['add', 'remove']),
            'comment' => $this->faker->paragraph,
        ];

        $this->makeCreateRequest($params);

        $this->assertCount(1, PlaceRequest::query()->get());
    }

    /** @test */
    public function itEmitsAnEventWhenARequestIsReceived()
    {
        Event::fake();

        $this->makeCreateRequest();

        Event::assertDispatched(PlaceRequestSubmitted::class);
    }

    /** @test */
    public function itTriggersAnEmailWhenARequestIsRecieved()
    {
        Mail::fake();

        $this->makeCreateRequest();

        Mail::assertSent(PlaceRequestMailable::class);
    }

    private function makeCreateRequest($params = [])
    {
        return $this->post('/api/wheretoeat/place-request', array_merge([
            'name' => $this->faker->name,
            'state' => $this->faker->randomElement(['add', 'remove']),
            'comment' => $this->faker->paragraph,
        ], $params));
    }
}
