<?php

namespace Tests\Feature;

use Coeliac\Modules\Blog\Models\BlogTag;
use Coeliac\Modules\Member\Contracts\Subscribable;
use Coeliac\Modules\Member\Models\SubscriptionType;
use Coeliac\Modules\Member\Models\User;
use Coeliac\Modules\Member\Models\UserSubscription;
use Tests\Abstracts\DashboardTest;

class MemberSubscriptionsTest extends DashboardTest
{
    protected BlogTag $blogTag;

    protected function page(): string
    {
        return 'subscriptions';
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->blogTag = factory(BlogTag::class)->create();
    }

    protected function makeSubscribeRequest($type = SubscriptionType::BLOG_TAGS, $subscribable = null, $prop = 'tag')
    {
        if ($subscribable === null) {
            $subscribable = $this->blogTag;
        }

        return $this->post('/api/member/dashboard/subscriptions', [
            'type' => $type,
            'subscribable' => $subscribable instanceof Subscribable ? $subscribable->$prop : $subscribable,
        ]);
    }

    /** @test */
    public function it_errors_when_subscribing_without_a_type()
    {
        $this->makeSubscribeRequest(null)->assertStatus(422);
    }

    /** @test */
    public function it_errors_when_subscribing_with_an_invalid_type()
    {
        $this->makeSubscribeRequest('foo')->assertStatus(422);
    }

    /** @test */
    public function it_errors_when_subscribing_to_a_type_that_doesnt_exist()
    {
        $this->makeSubscribeRequest(999)->assertStatus(422);
    }

    /** @test */
    public function it_errors_when_subscribing_without_a_subscribable()
    {
        $this->makeSubscribeRequest(SubscriptionType::BLOG_TAGS, false)->assertStatus(422);
    }

    /** @test */
    public function it_errors_when_trying_to_subscribe_to_a_subscribable_that_doesnt_exist()
    {
        $this->makeSubscribeRequest(SubscriptionType::BLOG_TAGS, 'foo')->assertStatus(422);
    }

    /** @test */
    public function it_returns_ok_on_the_subscribe_page_with_valid_data()
    {
        $this->makeSubscribeRequest()->assertOk();
    }

    /** @test */
    public function it_subscribes_the_user()
    {
        $this->assertEmpty(UserSubscription::all());

        $this->makeSubscribeRequest()->assertOk();

        $this->assertNotEmpty(UserSubscription::all());

        /** @var UserSubscription $subscription */
        $subscription = UserSubscription::query()->first();

        $this->assertEquals($this->user->id, $subscription->user_id);
        $this->assertEquals(SubscriptionType::BLOG_TAGS, $subscription->user_subscription_type_id);
        $this->assertInstanceOf(BlogTag::class, $subscription->subscribable);
        $this->assertTrue($this->blogTag->is($subscription->subscribable));
    }

    /** @test */
    public function it_can_unsubscribe()
    {
        $this->makeSubscribeRequest();

        $this->assertNotEmpty(UserSubscription::all());

        /** @var UserSubscription $subscription */
        $subscription = UserSubscription::query()->first();

        $this->delete("/api/member/dashboard/subscriptions/{$subscription->id}")->assertOk();

        $this->assertEmpty(UserSubscription::all());
    }

    /** @test */
    public function it_errors_if_the_subscription_doesnt_exist()
    {
        $this->delete('/api/member/dashboard/subscriptions/foo')->assertStatus(404);
    }

    /** @test */
    public function it_errors_when_trying_to_unsubscribe_from_another_users_subscriptions()
    {
        $user = factory(User::class)->create();

        SubscriptionType::query()->first()->subscribe($user, $this->blogTag);

        $this->assertNotEmpty(UserSubscription::all());

        /** @var UserSubscription $subscription */
        $subscription = UserSubscription::query()->first();

        $this->delete("/api/member/dashboard/subscriptions/{$subscription->id}")->assertStatus(403);

        $this->assertNotEmpty(UserSubscription::all());
    }
}
